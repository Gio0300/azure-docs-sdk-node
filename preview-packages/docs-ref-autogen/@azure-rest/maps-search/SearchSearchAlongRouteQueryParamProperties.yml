### YamlMime:TSType
name: SearchSearchAlongRouteQueryParamProperties
uid: '@azure-rest/maps-search.SearchSearchAlongRouteQueryParamProperties'
package: '@azure-rest/maps-search'
summary: ''
fullName: SearchSearchAlongRouteQueryParamProperties
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: brandSet
    uid: >-
      @azure-rest/maps-search.SearchSearchAlongRouteQueryParamProperties.brandSet
    package: '@azure-rest/maps-search'
    summary: >-
      A comma-separated list of brand names which could be used to restrict the
      result to specific brands. Item order does not matter. When multiple
      brands are provided, only results that belong to (at least) one of the
      provided list will be returned. Brands that contain a "," in their name
      should be put into quotes.


      Usage examples:

       brandSet=Foo

       brandSet=Foo,Bar

       brandSet="A,B,C Comma",Bar
    fullName: brandSet
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'brandSet?: string[]'
      return:
        description: ''
        type: string[]
  - name: categorySet
    uid: >-
      @azure-rest/maps-search.SearchSearchAlongRouteQueryParamProperties.categorySet
    package: '@azure-rest/maps-search'
    summary: >-
      A comma-separated list of category set IDs which could be used to restrict
      the result to specific Points of Interest categories. ID order does not
      matter. When multiple category identifiers are provided, only POIs that
      belong to (at least) one of the categories from the provided list will be
      returned. The list of supported categories can be discovered using  [POI
      Categories API](https://aka.ms/AzureMapsPOICategoryTree). Usage examples:


      * **categorySet=7315** (Search Points of Interest from category
      Restaurant)


      * **categorySet=7315025,7315017** (Search Points of Interest of category
      either Italian or French Restaurant)
    fullName: categorySet
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'categorySet?: number[]'
      return:
        description: ''
        type: number[]
  - name: connectorSet
    uid: >-
      @azure-rest/maps-search.SearchSearchAlongRouteQueryParamProperties.connectorSet
    package: '@azure-rest/maps-search'
    summary: >-
      A comma-separated list of connector types which could be used to restrict
      the result to Electric Vehicle Station supporting specific connector
      types. Item order does not matter. When multiple connector types are
      provided, only results that belong to (at least) one of the provided list
      will be returned.


      Available connector types are:
        * `StandardHouseholdCountrySpecific` - These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage. See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets).
        * `IEC62196Type1` - Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure.
        * `IEC62196Type1CCS` - Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
        * `IEC62196Type2CableAttached` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point.
        * `IEC62196Type2Outlet` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point.
        * `IEC62196Type2CCS` - Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.
        * `IEC62196Type3` - Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure.
        * `Chademo` - CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging.
        * `IEC60309AC1PhaseBlue` - Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the "P+N+E, 6h" configuration.
        * `IEC60309DCWhite` - Industrial White connector is a DC connector defined in the IEC 60309 standard.
        * `Tesla` - The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.

      Usage examples:

       connectorSet=IEC62196Type2CableAttached
       connectorSet=IEC62196Type2Outlet,IEC62196Type2CableAttached
    fullName: connectorSet
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        connectorSet?: ("StandardHouseholdCountrySpecific" | "IEC62196Type1" |
        "IEC62196Type1CCS" | "IEC62196Type2CableAttached" |
        "IEC62196Type2Outlet" | "IEC62196Type2CCS" | "IEC62196Type3" | "Chademo"
        | "IEC60309AC1PhaseBlue" | "IEC60309DCWhite" | "Tesla")[]
      return:
        description: ''
        type: >-
          ("StandardHouseholdCountrySpecific" | "IEC62196Type1" |
          "IEC62196Type1CCS" | "IEC62196Type2CableAttached" |
          "IEC62196Type2Outlet" | "IEC62196Type2CCS" | "IEC62196Type3" |
          "Chademo" | "IEC60309AC1PhaseBlue" | "IEC60309DCWhite" | "Tesla")[]
  - name: limit
    uid: '@azure-rest/maps-search.SearchSearchAlongRouteQueryParamProperties.limit'
    package: '@azure-rest/maps-search'
    summary: >-
      Maximum number of responses that will be returned. Default value is 10.
      Max value is 20
    fullName: limit
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'limit?: number'
      return:
        description: ''
        type: number
  - name: maxDetourTime
    uid: >-
      @azure-rest/maps-search.SearchSearchAlongRouteQueryParamProperties.maxDetourTime
    package: '@azure-rest/maps-search'
    summary: >-
      Maximum detour time of the point of interest in seconds. Max value is 3600
      seconds
    fullName: maxDetourTime
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'maxDetourTime: number'
      return:
        description: ''
        type: number
  - name: openingHours
    uid: >-
      @azure-rest/maps-search.SearchSearchAlongRouteQueryParamProperties.openingHours
    package: '@azure-rest/maps-search'
    summary: >-
      Hours of operation for a POI (Points of Interest). The availability of
      hours of operation will vary based on the data available. If not passed,
      then no opening hours information will be returned.

      Supported value: nextSevenDays
    fullName: openingHours
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'openingHours?: "nextSevenDays"'
      return:
        description: ''
        type: '"nextSevenDays"'
  - name: query
    uid: '@azure-rest/maps-search.SearchSearchAlongRouteQueryParamProperties.query'
    package: '@azure-rest/maps-search'
    summary: >-
      The POI name to search for (e.g., "statue of liberty", "starbucks",
      "pizza"). Must be properly URL encoded.
    fullName: query
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'query: string'
      return:
        description: ''
        type: string
  - name: view
    uid: '@azure-rest/maps-search.SearchSearchAlongRouteQueryParamProperties.view'
    package: '@azure-rest/maps-search'
    summary: >-
      The View parameter (also called the "user region" parameter) allows you to
      show the correct maps for a certain country/region for geopolitically
      disputed regions. Different countries/regions have different views of such
      regions, and the View parameter allows your application to comply with the
      view required by the country/region your application will be serving. By
      default, the View parameter is set to “Unified” even if you haven’t
      defined it in  the request. It is your responsibility to determine the
      location of your users, and then set the View parameter correctly for that
      location. Alternatively, you have the option to set ‘View=Auto’, which
      will return the map data based on the IP  address of the request. The View
      parameter in Azure Maps must be used in compliance with applicable laws,
      including those  regarding mapping, of the country/region where maps,
      images and other data and third party content that you are authorized to 
      access via Azure Maps is made available. Example: view=IN.


      Please refer to [Supported
      Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see
      the available Views.
    fullName: view
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        view?: "AE" | "AR" | "BH" | "IN" | "IQ" | "JO" | "KW" | "LB" | "MA" |
        "OM" | "PK" | "PS" | "QA" | "SA" | "SY" | "YE" | "Auto" | "Unified"
      return:
        description: ''
        type: >-
          "AE" | "AR" | "BH" | "IN" | "IQ" | "JO" | "KW" | "LB" | "MA" | "OM" |
          "PK" | "PS" | "QA" | "SA" | "SY" | "YE" | "Auto" | "Unified"
